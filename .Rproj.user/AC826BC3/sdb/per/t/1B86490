{
    "collab_server" : "",
    "contents" : "---\ntitle: \"`Shiny` and `flexdashboard`\"\noutput:\n  html_document: \n    toc: true\n    toc_float: true\n---\n\n`Shiny` is RStudio's framework for creating interactive graphics and web-like applications. There are several ways to use the power of `Shiny` and we're going to focus on how to use it in conjunction with `flexdashboard` to make interactive dashboards within R Markdown.\n\nThis is the second module in the [Interactivity](topic_interactivity.html) topic; the relevant slack channel is [here](https://p8105-fall2017.slack.com/messages/C7RJ9G3SP).\n\n```{r, echo = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  fig.width = 6,\n  fig.asp = .6,\n  out.width = \"90%\"\n)\n```\n\n\n## Some slides\n\n<script async class=\"speakerdeck-embed\" data-id=\"c1b6fe0d9dd44fa494b5004c839798c2\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n<div style=\"margin-bottom:5px\"> <strong> <a href=\"https://speakerdeck.com/jeffgoldsmith/dsi-shiny\" title=\"Shiny\" target=\"_blank\">Shiny</a> </strong></div><br>\n\n\n## Example\n\nTo gear up for this topic, weâ€™ll create a directory, start an R Project, initialize git, and create a new `flexdashboard` document. Here is a [template](resources/shiny_dashboard_template.Rmd.zip) for the `flexdashboard` we'll be creating today, go ahead and download that and put it in your directory.\n\n```{r, echo = FALSE, comment = \"\"}\ncat(htmltools::includeText(\"resources/shiny_dashboard_template.Rmd\"))\n```\n\nNotice that we have added `runtime: shiny` to the YAML header. We are also using slightly different layout than we used in the last class. We have a sidebar column, spaces for plots are in rows instead of columns, and we have tabsets. \n\nAdd the following libraries to your dashboard.\n\n```{r}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(viridis)\n\nlibrary(plotly)\n\nlibrary(shiny)\n```\n\nOnce again we're going to focus on the [Airbnb](dataset_airbnb.html) data for this topic. The goal is to make a dashboard similar to the one from the last lecture but with additional interactive elements. The code below extracts, loads and cleans the data, and selects only a few of the variables. \n\n```{r import_data}\nset.seed(1)\n\nairbnb_data = read_csv(\"./data/nyc_airbnb.zip\") %>%\n  clean_names() %>%\n  mutate(rating = review_scores_location / 2) %>%\n  select(boro = neighbourhood_group, neighbourhood, rating, price, room_type,\n         latitude, longitude) %>%\n  filter(!is.na(rating)) \n\n```\n\nWe are going to filter the dataset interactively by taking user input, and use this dataset as the basis for our plots.\n\n### selectInput widget\n\nWe will place code for widgets in the sidebar, but this is a choice and they can be placed elsewhere in the dashboard. The `selectInput` widget creates a drop-down menu with choices for the user to select from. We will render the plots in the rows.\n\n```{r, eval = FALSE}\nboros = airbnb_data %>% distinct(boro) %>% pull()\n\n# selectInput widget\nselectInput(\"boro_choice\", label = h3(\"Select boro\"),\n            choices = boros, selected = \"Manhattan\")\n\n```\n\nNow we can select each of the different boros in New York. But how do we use this to update our dataset or plot?\n\n```{r, eval = FALSE}\nrenderPrint({ \n  input$boro_choice\n})\n```\n\nWe see that the user-select boro is stored as a string 'under the hood'. \n\n### sliderInput widget\n\nWhat would the `renderPrint` return if we wanted the user to select a numeric value? Let's add another widget and find out.\n\n```{r, eval = FALSE}\nmax_price = 1000\nmin_price = airbnb_data %>% distinct(price) %>% min()\n  \n# sliderInput widget\nsliderInput(\"price_range\", label = h3(\"Choose price range\"), min = min_price, \n        max = max_price, value = c(100, 400))\n```\n\n### radioButtons widget\n\nLet's add one more widget and then build out the plots.\n\n```{r, eval = FALSE}\nroom_choice = airbnb_data %>% distinct(room_type) %>% pull()\n\n# radioButtons widget\nradioButtons(\"room_choice\", label = h3(\"Choose room type\"),\n    choices = room_choice, \n    selected = \"Entire home/apt\")\n```\n\nThis last widget provides a button which allows the user to select among the types of rooms. For other types of widgets check out the [widget gallery](https://shiny.rstudio.com/gallery/widget-gallery.html).\n\n### Interactive scatterplot\n\nWe start with the same `plot_ly` scatter plot we used in the last class. The only difference is now we will wrap it in a `renderPlotly` call. Go ahead and replace the `renderText` with the code below in your `flexdashboard`.\n\n```{r, eval = FALSE}\nrenderPlotly({ \n  airbnb_data %>%\n  mutate(text_label = str_c(\"Price: $\", price, '\\nRating: ', rating)) %>% \n  plot_ly(x = ~longitude, y = ~latitude, type = \"scatter\", mode = \"markers\",\n          alpha = 0.5, \n          color = ~price,\n          text = ~text_label)\n})\n\n```\n\nThe plot shows up, but in order to get it to change along with user input options from the sidebar, we need to add some Shiny `input$` calls.  \n\nHere's a code chunk that incorporates the user input.\n\n```{r, eval = FALSE}\nrenderPlotly({\n    airbnb_data %>%\n    filter(boro == input$boro_choice, \n           price %in% input$price_range[1]:input$price_range[2],\n           room_type == input$room_choice) %>%\n    mutate(text_label = str_c(\"Price: $\", price, '\\nRating: ', rating)) %>% \n    plot_ly(x = ~longitude, y = ~latitude, type = \"scatter\", mode = \"markers\",\n          alpha = 0.5, \n          color = ~price,\n          text = ~text_label)\n})\n```\n\n\n### Interactive barchart\n\nSimilarly, we'll take the boxplot code from last lecture, add it to our dashboard, and edit the code so it incorporates user input. \n\n```{r, eval = FALSE}\nrenderPlotly({\n  airbnb_data %>% \n  count(neighbourhood) %>% \n  mutate(neighbourhood = fct_reorder(neighbourhood, n)) %>% \n  plot_ly(x = ~neighbourhood, y = ~n, color = ~neighbourhood, type = \"bar\")\n})\n\n```\n\nNotice that neighborhoods change with choice of boro.\n\n### Interactive boxplot\n\nLastly, we'll make the boxplot from last lecture and add in the Shiny user input elements. I've provided the code below.\n\n```{r, eval = FALSE}\nrenderPlotly({ \n  common_neighborhoods =\n    airbnb_data %>% \n    filter(boro == input$boro_choice,\n           price %in% input$price_range[1]:input$price_range[2],\n           room_type == input$room_choice) %>%\n    count(neighbourhood, sort = TRUE) %>% \n    top_n(8) %>% \n    select(neighbourhood)\n\n  airbnb_data %>%\n    filter(boro == input$boro_choice,\n                          price %in% input$price_range[1]:input$price_range[2],\n                          room_type == input$room_choice) %>%\n    inner_join(., common_neighborhoods, by = \"neighbourhood\") %>% \n    plot_ly(y = ~price, color = ~neighbourhood, type = \"box\",\n          colors = \"Set2\")\n  \n})\n```\n\nNow you have a `flexdashboard` with Shiny elements! \n\n### Hosting Shiny documents\n\nYou can't email Shiny-based HTML files like you can a static HTML file generated by R Markdown. This is because Shiny-based documents need to run `R` locally. However, you can host them through [Shinyapps.io](https://www.shinyapps.io/). A slightly fancier version of the Shiny-based `flexdashboard` for this class is hosted [here](https://julia-wrobel.shinyapps.io/airbnb_dashboard/). Check it out!\n\n### Shiny apps\n\nSo far we've focused on adding Shiny to `flexdashboard`. We refer to our completed dashboard as a _Shiny document_.  However, there other ways to use Shiny! The most common way is to make a Shiny _application_, or _app_. So you know how these work, we're going to make a super simple one and deploy it. If you are interested in making a more complicated _Shiny app_, I've included some resources below.\n\nShiny apps use **.R** files, rather than **.Rmd**. You can initialize a Shiny app right from R Studio! Let's do that now.\n\n<img src=\"images/shiny_new_app.png\" style=\"width:75%\">\n\nMake sure to set a new directory for your app. Let's put an R project in there too, and open up that R project. In order to deploy the app, you can either open the file, and click the **RunApp** button, or run the following line of code in your console:\n\n```{r, eval = FALSE}\nshiny::runApp(\"../my_app\")\n```\n\n\n## Other materials\n\n* For more on using flexdashboards with Shiny, here's a [tutorial](http://rmarkdown.rstudio.com/flexdashboard/shiny.html)\n* There are also several [examples](http://rmarkdown.rstudio.com/flexdashboard/examples.html) of people making these types flexdashboards, many which incorporate Shiny\n* Hosting your shiny app or document online through [shinyapps.io](https://shiny.rstudio.com/articles/shinyapps.html).\n* For more on making Shiny apps, check out R Studio's [tutorial](https://shiny.rstudio.com/tutorial/), or [this one](https://deanattali.com/blog/building-shiny-apps-tutorial/)\n\n\n",
    "created" : 1509988702087.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3505134732",
    "id" : "1B86490",
    "lastKnownWriteTime" : 1509990588,
    "last_content_update" : 1509990588807,
    "path" : "~/DSI/shiny.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}